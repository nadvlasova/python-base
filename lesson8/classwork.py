import re
# re библиотека регулярных выражений
values = ['abd', 'a34', '234', '1324d''123-456-789']
# из этого списка строк найти образцы, где встречается хоть одна цифра
for value in values: # итерация по всем значениям этого списка
    result = re.search(r'\d', value) # в библиотеке re есть метод search у которого 2 параметра:'\d' - образец который мы ищем и value строка в которой ищем
    # result = '0' in value # такой запрос проверяет есть ли ноль в value        # '\d'- это означает любая цифра
    # result = '0', in value or '1' in value or '2' in value # проверит наличие 1 или 2 или 3 и выдаст True, вместо этого '\d' и все проще
    # result = re.search(r"\d4") # это запрос найти цифру, за которой идет 4
    # result = re.search(r"2\d4", value) найти что-то, что начинается на 2, затем любая цифра и далее 4
    # result = re.search(r'[a-z]', value)  запрос на поиск любой буквы, в квадратных скобках любой диапазон
    # result = re.search(r'[9d-]', value) запрос на либо 9 либо d либо перенос, дефис (-)
    # result = re.search(r'[a-z][0-7]a', value)
    if result:  # если результат не пустой, значит встретился образец списка где есть любая цифра
        a, b = result.span()
        print(value, value[a:b], result.groups()) # .groups() возвращает тапл из найденных элементов
# a34 <re.Match object; span=(1, 2), match='3'> #re.Match object - спец объект, span=(1, 2)-его находка на позиции 1,2, match='3' - а это первое, что нашел
# 234 <re.Match object; span=(0, 1), match='2'>  # span=(0, 1) промежуток на котором находна, правая граница не включена
# 1324d <re.Match object; span=(0, 1), match='1'>
    else:
        print(value, 'ничего не найдено') # если ничего не нашла
# abd ничего не найдено
# a34 <re.Match object; span=(1, 2), match='3'>
# 234 <re.Match object; span=(0, 1), match='2'>
# 1324d <re.Match object; span=(0, 1), match='1'>

# \ кватирующий символ нужен, чтобы простые символы воспринимались не как служебные для одного слеша придется поставить ещё один
# с регул. выражениями слэшей много, поэтому придумали модификатор r и тогда строка воспринимается сырой и управляющие символы воспринимаются как простые
# result = re.search(r'a', value) # ищет есть ли а
# result = re.search(r'я', value) # с кирилицей работает
# result = re.search(r'[aef8]', value) # будет искать любой символ из тех что в квадратных скобках
# result = re.search(r'a', value) #
# result = re.search(r'\d+', value) # одна или несколько цифр
# result = re.search(r'\d{2, 4}', value) #от 2 до 4 цифр подряд
# result = re.search(r'л*', value) ноль или более, пустышка
# result = re.search(r'л+', value) один или более
# result = re.search(r'(a\d)*', value) # ищем (a\d)* (a + какое-то число) * таких выражение одно или больше
# result = re.search(r'(A\d)+', value, re.IGNORECASE) # .IGNORECASE флаг для игнора регистра
#result = re.search((r'(a\d)+(\d{3})'), value) #  результатом ('a3', '423')
#result = re.search((r'((a\d)+)(\d{3})'), value) #  результатом ('a3','a9', '423') ((a\d)+) чтобы отловить все такие конструкции заключаем в скобки вместе с модификатором +
#result = re.search((r'^a') # ^  означает, что искать образец начнем с первого символа (^a - те, которые начинаются на a)  (^\d - те которые начинаются на цифру)
#result = re.search((r'a$') # $ искать образец который заканчивается на а
#result = re.search((r'^\d$') # ищем то, что начинается и заканчивается на цифру и состоит только из цифр
#result = re.search((r'^\+?\d+$') # начинается и заканчивается на цифру и состоит только из цифр, но в начале еще и + может быть, а слеш перед + как кватирующий +
#result = re.search((r'^[+-]{0,1}\d+$') # {0,1}-количество повторений [+-] -данного образца
#result = re.search((r'^[+-]?\d+$') #  знак вопроса означает ноль или одно вхождение  т.е. ? == {0,1}
#result = re.search((r'^.+$')  #точка это любой знак, эта конструкция ищет любой образец, где есть хоть один любой символ
#result = re.search((r'^.{15}+$') #  образец в котором 15 и больше любых символов
#result = re.sub(r'(\d+)', r'"\1"', text) #  (\d+)=найти все идущие подряд цифры без пробела,  '"\1"' = и обернуть в кавычки то, что нашел, text=имя переменной, где искать
#result = re.sub(r'(\d+) (\d+)', r'\2\1', text) # (\d+) (\d+)= ищем конструкцию одно число, через пробел второе, '\2\1' и меняем их местами # 123 456 =456 123